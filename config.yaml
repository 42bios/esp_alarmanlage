## Grundlegende Konfiguration

esphome:
  name: alarmanlage
  platform: ESP32
  board: esp32-poe-iso

# Verbindung über LAN (kein WLAN)
ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO17_OUT
  phy_addr: 1
  power_pin: GPIO12

# Globale Variablen
globals:
  - id: alarm_status
    type: bool
    restore_value: false
  - id: pin_code
    type: string
    initial_value: !secret alarm_pin

## OLED-Display Konfiguration

# I2C-Konfiguration
i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true
  frequency: 400kHz

# OLED-Display
font:
  - file: "fonts/arial.ttf"
    id: my_font
    size: 14

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x32"
    reset_pin: GPIO16
    address: 0x3C
    lambda: |-
      if (id(alarm_status)) {
        it.printf(0, 0, id(my_font), "Alarm: AKTIVIERT");
      } else {
        it.printf(0, 0, id(my_font), "Alarm: DEAKTIVIERT");
      }

## Tastenfeld (Keypad) Konfiguration

matrix:
  columns:
    - pin: GPIO25
      id: col1
    - pin: GPIO26
      id: col2
    - pin: GPIO27
      id: col3
  rows:
    - pin: GPIO28
      id: row1
    - pin: GPIO29
      id: row2
    - pin: GPIO30
      id: row3
    - pin: GPIO31
      id: row4

  sensors:
    - id: key_1
      row: 0
      column: 0
      on_press:
        # Aktionen für Taste "1"
    - id: key_2
      row: 0
      column: 1
      on_press:
        # Aktionen für Taste "2"
    # ... und so weiter für alle Tasten (1, 2, 3, 4, 5, 6, 7, 8, 9, 0, *, #)

## Implementierung der PIN-Eingabe und Sicherheitsfunktionen

# Globale Variablen um den PIN-Code und die Anzahl der Fehlversuche zu speichern.
globals:
  - id: stored_pin
    type: std::string
    restore_value: no
    initial_value: '1234' # Deine gewünschte PIN

  - id: pin_entry
    type: std::string
    restore_value: no

  - id: failed_attempts
    type: int
    restore_value: no
    initial_value: '0'

# Tastendrücke behandeln: 
# Jeder Tastendruck fügt eine Ziffer zur eingegebenen PIN hinzu oder 
# führt eine spezielle Aktion aus (wie die Eingabe löschen oder die Eingabe übermitteln).
    # Beispiel für Taste "1"
    - id: key_1
      row: 0
      column: 0
      on_press:
        then:
          - lambda: |-
              id(pin_entry) += "1";
              // Logik zur Aktualisierung des Displays

# PIN-Überprüfung: 
# Wenn die Eingabetaste gedrückt wird (zum Beispiel die Taste "#"), überprüfen wir die eingegebene PIN.
# Nach einer festgelegten Anzahl von fehlerhaften Eingabeversuchen (zum Beispiel 3) 
# fügt das System eine Verzögerung hinzu, bevor weitere Eingaben akzeptiert werden.
    # Beispiel für die Übermittlungstaste
    - id: key_hash
      row: 3
      column: 2
      on_press:
        then:
          - lambda: |-
              if (id(failed_attempts) >= 3) {
                // Verzögerung von 30 Sekunden hinzufügen
                delay(30000);
                // Nach der Verzögerung die Fehlversuche zurücksetzen
                id(failed_attempts) = 0;
              }

              if (id(pin_entry) == id(stored_pin)) {
                // Erfolg: Alarm deaktivieren/aktivieren
                id(pin_entry) = ""; // Eingabe zurücksetzen
              } else {
                // Fehler: Fehlversuch hinzufügen
                id(failed_attempts) += 1;
                id(pin_entry) = ""; // Eingabe zurücksetzen
              }

## NFC-Reader MFRC522 einrichten

# SPI-Konfiguration
spi:
  clk_pin: GPIO18
  miso_pin: GPIO19
  mosi_pin: GPIO23

# MFRC522 Konfiguration
rc522:
  cs_pin: GPIO2
  update_interval: 1s

# NFC-Tag Überprüfung
  on_tag:
    then:
      - lambda: |-
          if (id(allowed_tags).has_tag(x)) {
            // Aktionen, wenn ein gültiger Tag erkannt wird
          }

## NFC-Tag-Logik implementieren

# Erlaubte NFC-Tags definieren
globals:
  - id: allowed_tags
    type: std::vector<std::string>
    restore_value: false
    initial_value: '["Tag1", "Tag2"]'

# NFC-Tag lesen und überprüfen
rc522:
  on_tag:
    then:
      - lambda: |-
          if (id(allowed_tags).has_tag(x.uid)) {
            // Aktionen, wenn ein gültiger Tag erkannt wird
          }

## Implementierung der NFC-Tag-Verwaltung und Aktivierungs-/Deaktivierungs-Logik

# Aktivieren/Deaktivieren der Alarmanlage
rc522:
  on_tag:
    then:
      - lambda: |-
          if (id(allowed_tags).has_tag(x.uid)) {
            if (id(alarm_status)) {
              id(alarm_status) = false;
              id(led_white).turn_off();
              id(led_red).turn_on();
            } else {
              id(alarm_status) = true;
              id(led_white).turn_on();
              id(led_red).turn_off();
            }
          }

# LEDs konfigurieren
output:
  - platform: gpio
    pin: GPIOxx
    id: led_white

  - platform: gpio
    pin: GPIOyy
    id: led_red

## Implementierung der Benutzeroberfläche für die Tag-Verwaltung

# Menü mit zwei Optionen: 
# "Tag hinzufügen" und "Tag entfernen". 
# Dies könnte durch das Drücken bestimmter Tasten auf dem Keypad ausgelöst werden, 
# z. B. * für "Tag hinzufügen" und # für "Tag entfernen".
# Am Display werden folgende Infos angezeigt:
# "Tag hinzufügen: Bitte Tag an den Reader halten."
# "Tag entfernen: Bitte Tag an den Reader halten."
on_key_press:
  - if:
      condition:
        lambda: 'return x == "*";'
      then:
        - display.ssd1306_i2c:
            lambda: |-
              it.printf("Tag hinzufügen: Bitte Tag an den Reader halten.");
        - lambda: |-
            // Warte auf NFC-Tag und füge zur Liste hinzu
  - if:
      condition:
        lambda: 'return x == "#";'
      then:
        - display.ssd1306_i2c:
            lambda: |-
              it.printf("Tag entfernen: Bitte Tag an den Reader halten.");
        - lambda: |-
            // Warte auf NFC-Tag und entferne aus der Liste

## Implementierung der Logik zum Hinzufügen und Entfernen von NFC-Tags

# Liste der erlaubten Tags
# Globalen Variable zum speichern der UIDs der Tags
globals:
  - id: allowed_tags
    type: std::vector<uint32_t>

# Logik zum Hinzufügen von Tags UIDs
  - if:
      condition:
        lambda: 'return x == "*";'
      then:
        - display.ssd1306_i2c:
            lambda: |-
              it.printf("Tag hinzufügen: Bitte Tag an den Reader halten.");
        - rc522.on_tag:
            then:
              - lambda: |-
                  id(allowed_tags).push_back(x.uid);
                  // Erfolgsnachricht anzeigen

# Logik zum Entfernen von Tags UIDs
  - if:
      condition:
        lambda: 'return x == "#";'
      then:
        - display.ssd1306_i2c:
            lambda: |-
              it.printf("Tag entfernen: Bitte Tag an den Reader halten.");
        - rc522.on_tag:
            then:
              - lambda: |-
                  id(allowed_tags).erase(std::remove(id(allowed_tags).begin(), id(allowed_tags).end(), x.uid), id(allowed_tags).end());
                  // Erfolgsnachricht anzeigen

## Persistente Speicherung der erlaubten NFC-Tags

# EEPROM-Bereich definieren
# z.B. die UID jedes Tags beträgt 4 Bytes (geschätzt / verwenden 10 Tags).
esphome:
  name: my_device
  platform: ESP32
  board: esp32-poe-iso

eeprom:
  size: 40 # 4 Bytes pro Tag * 10 Tags

# Tags im EEPROM speichern
  - lambda: |-
      for (int i = 0; i < id(allowed_tags).size(); i++) {
        EEPROM.write(i * 4, (id(allowed_tags)[i] >> 24) & 0xFF);
        EEPROM.write(i * 4 + 1, (id(allowed_tags)[i] >> 16) & 0xFF);
        EEPROM.write(i * 4 + 2, (id(allowed_tags)[i] >> 8) & 0xFF);
        EEPROM.write(i * 4 + 3, id(allowed_tags)[i] & 0xFF);
      }
      EEPROM.commit(); # Änderungen speichern

# Tags aus EEPROM entfernen
  - lambda: |-
      // Verwende die gleiche Logik wie beim Hinzufügen, aber mit der aktualisierten Liste

# Tags aus dem EEPROM laden
# Beim Start des Systems werden die Tags aus dem EEPROM in die Liste der erlaubten Tags geladen.
esphome:
  on_boot:
    - lambda: |-
        id(allowed_tags).clear();
        for (int i = 0; i < 10; i++) {
          uint32_t uid = (EEPROM.read(i * 4) << 24) | (EEPROM.read(i * 4 + 1) << 16) | (EEPROM.read(i * 4 + 2) << 8) | EEPROM.read(i * 4 + 3);
          if (uid != 0xFFFFFFFF) { # Unbeschriebene EEPROM-Adressen haben den Wert 0xFF
            id(allowed_tags).push_back(uid);
          }
        }

## Einrichtung der Türkontakte mit dem MCP23017 I/O Expander

# MCP23017-Bibliothek einbinden
i2c:
  sda: GPIO21 # Ihr SDA-Pin
  scl: GPIO22 # Ihr SCL-Pin

mcp23017:
  - id: 'mcp23017_hub'
    address: 0x20

# Türkontakte als Binärsensoren definieren, die an den MCP23017 angeschlossen werden.
binary_sensor:
  - platform: gpio
    name: "Türkontakt 1"
    mcp23017: mcp23017_hub
    pin:
      number: 0
      mode: INPUT_PULLUP
      inverted: False
    on_press:
      # Logik für Alarm-Countdown

  # Wiederhole für weitere Türkontakte

# Logik für Alarm-Countdown
# Wird ein Türkontakt während eines aktiven Alarms ausgelöst wird, 
# startet ein Countdown für den Alarm.
    on_press:
      then:
        - if:
            condition:
              lambda: 'return id(alarm_active);' # Überprüfung, ob der Alarm aktiv ist
            then:
              - delay: 30s
              - lambda: 'id(trigger_alarm) = true;' # Trigger Alarm

# Globale Variablen
# Die globalen Variablen wie "alarm_active" und "trigger_alarm" müssen definiert sein, 
# damit die oben genannte Logik funktioniert.
globals:
  - id: alarm_active
    type: bool
    restore_value: false
  - id: trigger_alarm
    type: bool
    restore_value: false

## Implementierung des eigentlichen Alarms

# Alarmzustand definieren
# Der Alarmzustand kann durch einen Ausgangspin gesteuert werden, 
# der an eine Sirene oder ein Alarmsignal angeschlossen ist.
switch:
  - platform: gpio
    pin: GPIOx # Ersetze x durch den richtigen Pin
    id: alarm_signal

# Alarmlogik
# Da bereits eine globale Variable namens "trigger_alarm" vorhanden ist, 
# kann diese verwendet werden, um den Alarmzustand zu steuern.
interval:
  - interval: 1s
    then:
      - if:
          condition:
            lambda: 'return id(trigger_alarm);'
          then:
            - switch.turn_on: alarm_signal
          else:
            - switch.turn_off: alarm_signal

# Anzeige des Alarmstatus
# Die Status-LEDs (weiß für aktiviert, rot für deaktiviert) werden verwendet, 
# um den Alarmstatus visuell darzustellen.
output:
  - platform: gpio
    pin: GPIOy # Pin für weiße LED
    id: led_white

  - platform: gpio
    pin: GPIOz # Pin für rote LED
    id: led_red

light:
  - platform: binary
    name: "White LED"
    output: led_white

  - platform: binary
    name: "Red LED"
    output: led_red

# Logik des Alarmstatus
interval:
  - interval: 1s
    then:
      - if:
          condition:
            lambda: 'return id(alarm_active);' # Überprüfung, ob der Alarm aktiv ist
          then:
            - light.turn_on: led_white
            - light.turn_off: led_red
          else:
            - light.turn_off: led_white
            - light.turn_on: led_red

## Aktualisierung der Display-Logik

# Status der Alarmanlage anzeigen
lambda: |-
  it.printf(0, 0, id(font), "Alarm: %s", id(alarm_active) ? "Aktiviert" : "Deaktiviert");

# Hinweis bei offenen Türkontakten
# Wenn ein Türkontakt noch offen ist, wir dieser auf dem Display angezeigt.
lambda: |-
  if (id(door_contact_open)) {
    it.printf(0, 8, id(font), "Tuerkontakt offen!");
  }

# Countdown für Alarm anzeigen
# Wenn ein Türkontakt getriggert wird und der Alarm aktiv ist, 
# wir einen Countdown auf dem Display angezeiggt.
lambda: |-
  if (id(trigger_alarm)) {
    it.printf(0, 16, id(font), "Alarm in %d Sekunden!", id(alarm_countdown));
  }

## Hinzufügen des PIN-Eingabe Feedbacks

# Jedes Zeichen wird nach 2 Sekunden mit einem Sternchen ersetzt.
# Erstellen eines Puffers für die PIN-Eingabe
globals:
  - id: pin_buffer
    type: std::string
    restore_value: no
    initial_value: "' '"

# Aktualisieren des Puffers bei Tastendruck
on_key_pressed:
  then:
    - lambda: |-
        id(pin_buffer) += args["key_code"];
        id(update_pin_buffer_timer).start(); # Starten Sie den Timer, um den Puffer zu aktualisieren

# Erstellen eines Timers, um den Puffer zu aktualisieren
interval:
  id: update_pin_buffer_timer
  interval: 2s
  then:
    - lambda: |-
        if (id(pin_buffer).length() > 0) {
          id(pin_buffer)[id(pin_buffer).length() - 1] = '*';
        }

# Anzeigen des Puffers auf dem Display
lambda: |-
  it.printf(0, 24, id(font), "PIN: %s", id(pin_buffer).c_str());
